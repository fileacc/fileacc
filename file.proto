syntax = "proto3";

import "google/protobuf/timestamp.proto";

package filestore;

// File is the file.
message File {
	// id is the identifier of the current file.
	//
	// Notes:
	//   * Length: 16
	bytes id = 1;

	// created_at is the creation time of the current file.
	google.protobuf.Timestamp created_at = 2;

	// updated_at is the update time of the current file.
	google.protobuf.Timestamp updated_at = 3;

	// name is the name of the current file.
	//
	// Notes:
	//   * Unique
	//   * Absolute
	//   * Clean
	//   * Case-sensitive
	//   * UTF-8 encoded
	//   * Path separator: /
	//   * Length range: [1, 4096]
	//   * Path element length range: [1, 255]
	//   * Start with a path separator
	//   * End without a path separator
	string name = 4;

	// mime_type is the MIME type of the current file.
	//
	// Notes:
	//   * Lowercase
	//   * Length range: [1, 255]
	string mime_type = 5;

	// size is the size of the current file.
	//
	// Notes:
	//   * Unit: byte
	//   * Range: [1, 1099511627776]
	int64 size = 6;

	// actual_size is the actual size of the current file.
	//
	// Notes:
	//   * Unit: byte
	//   * Range: [0, 1099511627776]
	//   * It is equal to the size of the current file when the data of the
	//     current file has been uploaded
	int64 actual_size = 7;

	// checksum is the checksum of the current file.
	//
	// Notes:
	//   * Algorithm: SHA-256
	//   * Length: 32
	bytes checksum = 8;

	// lifetime is the lifetime of the current file.
	//
	// Notes:
	//   * Unit: second
	//   * Range: [1, 9223372036854775807]
	int64 lifetime = 9;

	// public indicates whether the current file is public.
	bool public = 10;

	// url is the URL of the current file.
	//
	// Notes:
	//   * Can only be requested via the GET and HEAD methods when the data of the
	//     current file has been uploaded
	//   * Can only be requested via the PATCH method when the data of the current
	//     file needs to be uploaded
	//   * A PATCH request is used to continue uploading (appending) data for the
	//     current file, please use the actual size of the current file to
	//     determine the upload offset
	//   * Once a PATCH request increases the actual size of the current file to
	//     be equal to the size of the current file, the backend will verify the
	//     uploaded data for the current file, an unpassed verification will cause
	//     the current file to be deleted immediately
	//   * Up to 1099511627776 (1 TB) of bytes per PATCH request
	//   * Expires in 3600 seconds when the current file is not public or the data
	//     of the current file needs to be uploaded
	string url = 11;
}
