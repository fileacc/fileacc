syntax = "proto3";

import "google/protobuf/timestamp.proto";

package fileacc;

// File is the file.
message File {
	// id is the identifier.
	//
	// Notes:
	//   * Unique
	//   * Length: 16
	bytes id = 1;

	// created_at is the creation time.
	google.protobuf.Timestamp created_at = 2;

	// updated_at is the update time.
	google.protobuf.Timestamp updated_at = 3;

	// name is the name.
	//
	// Notes:
	//   * Unique
	//   * Absolute
	//   * Clean
	//   * Case-sensitive
	//   * UTF-8 encoded
	//   * Path separator: /
	//   * Length range: [1, 4096]
	//   * Path element length range: [1, 255]
	//   * Start with a path separator
	//   * End without any path separator
	string name = 4;

	// mime_type is the MIME type.
	//
	// Notes:
	//   * Lowercase
	//   * Length range: [1, 255]
	string mime_type = 5;

	// size is the size.
	//
	// Notes:
	//   * Unit: byte
	//   * Range: [0, 1099511627776]
	int64 size = 6;

	// unuploaded_size is the size of the remaining data that needs to be
	// uploaded.
	//
	// Notes:
	//   * Unit: byte
	//   * Range: [0, 1099511627776]
	//   * It decreases as the data is uploaded until it is equal to zero
	//   * It is equal to zero when all data has been uploaded
	//   * It may already be equal to zero, even if the file was just created
	int64 unuploaded_size = 7;

	// checksum is the checksum.
	//
	// Notes:
	//   * Algorithm: SHA-256
	//   * Length: 32
	bytes checksum = 8;

	// lifetime is the lifetime.
	//
	// Notes:
	//   * Unit: second
	//   * Range: [1, 9223372036854775807]
	int64 lifetime = 9;

	// public indicates whether the file is public.
	bool public = 10;

	// url is the URL.
	//
	// Notes:
	//   * Can only be requested via the GET and HEAD methods when the
	//     `unuploaded_size` is equal to zero
	//   * Can only be requested via the PATCH method when the `unuploaded_size`
	//     is greater than zero
	//   * Must use "application/octet-stream" as the value of the Content-Type
	//     header for each PATCH request
	//   * A PATCH request is used to continue uploading (appending) data
	//   * Always use the `unuploaded_size` to determine the upload offset before
	//     starting a PATCH request, even it is the very first one
	//   * Once a PATCH request decreases the `unuploaded_size` to be equal to
	//     zero, the backend will verify all uploaded data (compare with the
	//     `checksum`). An unpassed verification will cause the file to be deleted
	//     immediately
	//   * Up to 4294967296 (4 GB) of bytes per PATCH request
	//   * Expires in a certain time (3600 seconds by default) when the
	//     `unuploaded_size` is greater than zero or the `public` is false
	string url = 11;
}
